new Node<RangeNode>(rn1);
                return returnlist1;

            }
            int first = pos.GetValue();
            int last1 = first;
            int last2 = pos.GetNext().GetValue();
            while(pos.HasNext() && last2- last1 == 1)
            {
                pos = pos.GetNext();
                last1 = last2;
                last2 = pos.GetNext().GetValue();
                
            }
            pos = pos.GetNext();
            RangeNode rn2 = new RangeNode(first, last1);
            Node<RangeNode> returnlist = new Node<RangeNode>(rn2);
            Node<RangeNode> pos2 = returnlist;
            
            while (pos != null)
            {
                if (pos.HasNext())
                {
                    first = pos.GetValue();
                    last1 = first;
                    last2 = pos.GetNext().GetValue();
                    while (last2 - last1 == 1 && pos.HasNext())
                    {
                        pos = pos.GetNext();
                        last1 = last2;
                        if (pos.HasNext())
                        {
                            last2 = pos.GetNext().GetValue();
                        }
                        else
                        {
                            last2 = last1;
                        }
                    }

                    RangeNode rn3 = new RangeNode(first, last1);
                    pos2.SetNext(new Node<RangeNode>(rn3));
                    pos2 = pos2.GetNext();                    
                    pos = pos.GetNext();
                    
                }
                else
                {

                    int x = pos.GetValue();
                    RangeNode rn3 = new RangeNode(x, x);
                    pos2.SetNext(new Node<RangeNode>(rn3));
                    pos = pos.GetNext();
                }

        
            }

            return returnlist;
        }
    
//המחלקה RangeNode:

class RangeNode
    {
        private int from;
        private int to;
        public RangeNode(int from, int to)
        {
            this.from = from;
            this.to = to;
        }
        public int GetFrom()
        {
            return this.from;
        }
        public int GetTo()
        {
            return this.to;
        }
        public void SetFrom(int from)
        {
            this.from = from; 
        }
        public void SetTo(int to)
        {
            this.to = to;
        }

    }

//**********************************************

בגרות תשס"ז שאלה 2
    class Course
    {
        private int code;
        private string name;
        private Node<string> recepie;
        public const int max = 15;
        public Course(int code, string name, Node<string> recepie)
        {
            this.code = code;
            this.name = name;
            this.recepie = recepie;
        }
        public int getCode()
        {
            return this.code;
        }
        public string getName()
        {
            return this.name;
        }
        public Node<string> getRecepie()
        {
            return this.recepie;
        }


    }
class Menu
    {
        public string name;
        public Course[] courses = new Course[22];
        public Menu(string name, Course[] courses)
        {
            this.name = name;
            this.courses = courses; 
        }
        public void printgoodcources(string f)
        {
            for (int i = 0; i < 22; i++)
            {
                if (this.courses[i] != null) {
                    Node<string> pos = courses[i].getRecepie();
                    bool isinresturant = true;
                    while (pos != null && isinresturant)
                    {
                        if(pos.GetValue() == f)
                        {
                            isinresturant = false;
                        }
                        pos = pos.GetNext();
                    }
                    if (isinresturant)
                    {
                        Console.WriteLine(courses[i].getCode()+ courses[i].getName());
                    }
            }

            }
        }
       

    }

//********************************************************
שאלה 48 רצפים של תווים זהים
class Numtav
    {
        private char tav;
        private int num;
        public Numtav(int num, char tav)
        {
            this.num = num;
            this.tav = tav;
        }

        public char Tav { get => tav; set => tav = value; }
        public int Num { get => num; set => num = value; }
    }
public static Node<char> Numoftav(Node<Numtav> list)
        {
            Node<char> returnlist = new Node<char>(list.GetValue().Tav);
            bool isfirst = true;
            Node<char> pos;
            pos = returnlist;
      
            while(list != null)
            {

                if (isfirst)
                {
                    isfirst = false;
                    for (int i = 0; i < list.GetValue().Num-1; i++)
                    {
                        pos.SetNext(new Node<char>(list.GetValue().Tav));
                        pos = pos.GetNext();
                    }
                    list = list.GetNext();
                }
                else
                {
                    for (int i = 0; i < list.GetValue().Num; i++)
                    {
                        pos.SetNext(new Node<char>(list.GetValue().Tav));
                        pos = pos.GetNext();
                    }
                    list = list.GetNext();
                }
            }
            return returnlist;
        }
//**************************************************************
עמוד 115 שאלה 53
המחלקה grade:
class Grade
    {
        private int course_code;
        private int grade;
        public Grade(int course_code, int grade)
        {
            this.course_code = course_code;
            this.grade = grade;
        }
        public int GetGrade()
        {
            return this.grade;
        }
        public int GetCode()
        {
            return this.course_code;
        }
    }
המחלקה מאגר הציונים
    class Avg
    {
        private int code;
        private int counter = 0;
        private int sum = 0; 
        public Avg(int code)
        {
            this.code = code;
        }
        public void addgrade(int grade)
        {
            counter++;
            sum += grade;
        }
        public int GetCode()
        {
            return this.code;
        }
        public double GetAvg()
        {
            return (double)this.sum / this.counter;
        }
     
    }
מחלקת סטודנט
class Student
    {
        private int id;
        private string name;
        private int year;
        private Node<Grade> grade_node;
        public Student(int id, string name, int year, Node<Grade> grade_node)
        {
            this.id = id;
            this.name = name;
            this.year = year;
            this.grade_node = grade_node;
        }
        public Node<Grade> Get_Grades()
        {
            return this.grade_node;
        }
        public string GetName()
        {
            return this.name;
        }

    }
א.
        public static void Grades(Node<Student> students)
        {
            Node<Student> pos = students;
            while (pos != null)
            {
                Node<Grade> grades = pos.GetValue().Get_Grades();
                int sum = 0;
                int counter = 0;
                while (grades != null)
                {
                    counter++;
                    sum += grades.GetValue().GetGrade();
                    grades = grades.GetNext();

                }
                Console.WriteLine("The student " + pos.GetValue().GetName() + " has an average of: " + (double)sum/counter);
                pos = pos.GetNext();
            }
        }
ב.
public static int Code(Node<Student> students)
        {
            Node<Student> pos = students;
            Avg[] arrAvg = new Avg[1000000];

            while (pos != null)
            {
                Node<Grade> grades = pos.GetValue().Get_Grades();
                while(grades != null)
                {
                    bool isexist = false;
                    for (int i = 0; i < arrAvg.Length; i++)
                    {
                        if (arrAvg[i]!=null && grades.GetValue().GetCode() == arrAvg[i].GetCode())
                        {
                            isexist = true;
                        }
                    }
                    if(isexist == false)
                    {
                        for (int i = 0; i < arrAvg.Length; i++)
                        {
                            if(arrAvg[i] == null)
                            {
                                arrAvg[i] = new Avg(grades.GetValue().GetCode());
                                i = arrAvg.Length;
                            }
                        }
                    }
                    grades = grades.GetNext();
                }
                pos = pos.GetNext();


            }
            Node<Student> pos2 = students;
            while (pos2 != null)
            {
                Node<Grade> grades = pos2.GetValue().Get_Grades();
                while (grades != null)
                {
                    for (int i = 0; i < arrAvg.Length; i++)
                    {
                        if(grades.GetValue().GetCode() == arrAvg[i].GetCode())
                        {
                            arrAvg[i].addgrade(grades.GetValue().GetGrade());
                            i = arrAvg.Length;
                        }
                    }
                    grades = grades.GetNext();
                }
                pos2 = pos2.GetNext();


            }
            Avg max = new Avg(-999);
            max.addgrade(0);
            for (int i = 0; i < arrAvg.Length; i++)
            {
                if(arrAvg[i]!= null)
                {
                    if(arrAvg[i].GetAvg()> max.GetAvg())
                    {
                        max = arrAvg[i];
                    }
                }
            }
            return max.GetCode();

        }
//*****************************************************
עמוד 37 תרגיל 14 דירות
סעיפים א וב
   class Room
    {
        private string roomType;
        private double roomHight;
        private double roomLength;

        public Room(string roomType, double roomHight, double roomLength)
        {
            this.roomType = roomType;
            this.roomHight = roomHight;
            this.roomLength = roomLength;
        }
        public Room(Room r1)
        {
            this.roomType = r1.roomType;
            this.roomHight = r1.roomHight;
            this.roomLength = r1.roomLength;
        }
        public double GetSize()
        {
            return this.roomHight * this.roomLength;
        }

            
    }
ג.
class Apatment
    {
        private string owner;
        private const int max = 10;
        Node<Room> roomNode;
        public Apatment(string owner, Node<Room> roomNode)
        {
            this.owner = owner;
            this.roomNode = roomNode;
        }
     }
ד.
    class Building
    {
        private Address address;
        private Node<Apatment> apartmentNode;
        private const int max = 100;

        public Building(Address address, Node<Apatment> apartmentNode)
        {
            this.address = address;
            this.apartmentNode = apartmentNode;
        }
        public Node<Apatment> GetApartment()
        {
            return this.apartmentNode;
        }
        public Address GetAddress()
        {
            return address;
        }

    }
ה.
1. במחלקה דירה
public double ApartmentSize()
        {
            double sum = 0;
            Node<Room> pos = this.roomNode;
            while (pos != null)
            {
                sum += pos.GetValue().GetSize();
                pos = pos.GetNext();
            }
            return sum;
        }
2.במחלקה דירה
        public string GetSize()
        {
            if(this.ApartmentSize() < 70)
            {
                return "small";
            }
            else if (this.ApartmentSize() < 110)
            {
                return "medium";
            }
            else
            {
                return "large";
            }
        }
3. בתוכנית הראשית
        public static void GetLargest(Node<Building> b1){
            int maxlarge =0;
            Address b4 = new Address("a", "a", -999);
            Node<Building> pos = b1;
            while (pos != null)
            {
                int counter = 0;
                Building b2 = pos.GetValue();
                Node<Apatment> a1 = b2.GetApartment();
                Node<Apatment> pos2 = a1;
                while(pos2 != null)
                {
                   if(pos2.GetValue().GetSize() == "large")
                    {
                        counter++;
                    }
                    pos2 = pos2.GetNext();

                }
                if(counter > maxlarge)
                {
                    maxlarge = counter;
                     b4 = pos.GetValue().GetAddress();
                }
                counter = 0;
                pos = pos.GetNext();

            }
            Console.WriteLine(b4.ToString());

        }
//*****************************************************************
שאלה 14 עמוד 133
        public static bool Question14(Stack<int> s1, int num)
        {
            int counter = 0;
            double sum = 0;
            int length1 = num.ToString().Length;
            Stack<int> s2 = new Stack<int>();
            while (!s1.IsEmpty())
            {
                int x = s1.Pop();
                s2.Push(x);
                sum += Math.Pow(10, counter)*x;
                counter++;
                 
            }
            string number1 = sum.ToString();
            int length2 = number1.Length;
            for (int i = 0; i < length2 - length1; i++)
            {
                string y = number1.Substring(i, i + length1);
                if(y == num.ToString())
                {
                    return true;
                }

            }

            
            
            
                int counter2 = 0;
                double sum2 = 0;
                while (!s2.IsEmpty()) 
                {
                    int x = s2.Pop();
                    sum2 += Math.Pow(10, counter2) * x;
                    counter2++;
                }
            string anumber1 = sum2.ToString();
             length2 = anumber1.Length;
            for (int i = 0; i < length2 - length1; i++)
            {
                string y = anumber1.Substring(i, i + length1);
                if (y == num.ToString())
                {
                    return true;
                }

            }

            return false; 
        }
//***************************************
עמוד 133 שאלה 16
public static void SecretCode(string code)
        {
            int code_length = code.Length;
            int last_time = code_length % 5;
            int num_of_times = code_length / 5;
            int counter = 0;
            string returncode = "";
            for (int i = 0; i < num_of_times; i++)
            {
                Stack<char> codestack = new Stack<char>();
                for (int j = 0; j < 5; j++)
                {
                    codestack.Push(code[counter]);
                    counter++;
                }
                while (!codestack.IsEmpty())
                {
                    returncode += codestack.Pop();
                }
            }
            Stack<char> codestack2 = new Stack<char>();
            for (int i = 0; i < last_time; i++)
            {
                codestack2.Push(code[counter]);
                counter++;
            }
            while (!codestack2.IsEmpty())
            {
                returncode += codestack2.Pop();
            }
            Console.WriteLine(returncode);
        }
//**************************
עמוד 133 שאלה 17
        public static int biggest(Stack<int> s)
        {
            int max = 0;
            int current = 0;
            int first;
            int last= s.Pop();
            while (!s.IsEmpty())
            {
                first = last;
                last = s.Pop();
                
                while (first - last == 1 && !s.IsEmpty())
                {
                    first = last;
                    last = s.Pop();
                    current++;

                }
                if(first -last ==1)
                {
                    current++;
                }
                if(current > max)
                {
                    max = current;
                    
                }
                current = 0; 
            }
            max++;
            return max;
        }
//******************************************
שאלת כיתה -ספר טלפונים
מחלקת איש קשר
class Contact
    {
        public string phone;
        public string name;

        public Contact(string phone, string name)
        {
            this.phone = phone;
            this.name = name;
        }
        public string GetName()
        {
            return this.name;
        }
        public string GetPhone()
        {
            return this.phone;
        }
        public void SetPhone(string phone)
        {
            this.phone = phone;
        }
        public override string ToString()
        {
            return "name: " + name + " phone: " + phone;
        }
    }

namespace Phonebook
{
    class PhoneBook
    {
        private Node<Contact> phonebook;
        public PhoneBook()
        {
            this.phonebook = null;
        }
        public string[] GetAllContactsNames()
        {
            Node<Contact> pos1 = this.phonebook;
            int counter = 0;
            while (pos1!= null)
            {
                counter++;
                pos1 = pos1.GetNext();
            }
            Node<Contact> pos2 = this.phonebook;
            string[] arr = new string[counter];
            for (int i = 0; i < arr.Length; i++)
            {
                arr[i] = pos2.GetValue().GetName();
                pos2 = pos2.GetNext();
            }
            return arr;




        }

        
        
        public string GetPhone(string name)
        {
            Node<Contact> pos = this.phonebook;
            bool found = false;
            while(pos != null && !found)
            {
                if(pos.GetValue().GetName() == name)
                {
                    found = true;
                    return pos.GetValue().GetPhone();
                }
                pos = pos.GetNext();
            }
            return null;
        }
        public Node<Contact> GetPhoneBook()
        {
            return this.phonebook;
        }
        public void DelContact(string name)
        {
            if (this.phonebook.GetValue().GetName() == name)
            {
                Node<Contact> p = this.phonebook;
                this.phonebook = this.phonebook.GetNext();
                p.SetNext(null);
            }
            else
            {
                Node<Contact> pos = this.phonebook;
                bool isexist = false;
                while (pos.HasNext() && !isexist)
                {
                    if (pos.GetNext().GetValue().GetName() == name)
                    {
                        isexist = true;
                    }
                    else
                    {
                        pos = pos.GetNext();
                    }

                }
                if (isexist)
                {
                    Node<Contact> del = pos.GetNext();
                    pos.SetNext(del.GetNext());
                    del.SetNext(null);
                }
            }
        }
        public override string ToString()
        {
            string str = "";
            for (char i = 'a'; i <= 'z'; i++)
            {
                Node<Contact> pos = this.phonebook;

                while (pos != null)
                {
                    if(pos.GetValue().GetName()[0] == i)
                    {
                        str += pos.GetValue().GetName();
                        str += " ";
                        str += pos.GetValue().GetPhone();
                        str += "/n";
                    }
                    pos = pos.GetNext();
                

                }
            }
            return str;
   
        }
        public void AddContact(string name, string phone)
        {
            if(this.phonebook == null)
            {
                this.phonebook = new Node<Contact>(new Contact(phone, name));

            }
            else
            {
                Node<Contact> pos = this.phonebook;
                bool isthere = false;
                while(pos != null)
                {
                    Contact contact = pos.GetValue();
                    string name2 = contact.GetName();
                    if (name2.Equals(name))
                    {
                        isthere = true;
                        pos.GetValue().SetPhone(phone);
                        
                    }

                    pos = pos.GetNext();
                }
                if (!isthere)
                {
                    Node<Contact> pos2 = this.phonebook;
                    while(pos2.GetNext() != null)
                    {
                        pos2 = pos2.GetNext();
                    }
                    pos2.SetNext(new Node<Contact>(new Contact(phone, name)));
                }

            }
        
             
        }
    }
}


